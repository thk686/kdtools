// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/kdtools.h"
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// matrix_to_tuples
List matrix_to_tuples(const NumericMatrix& x);
RcppExport SEXP _kdtools_matrix_to_tuples(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(matrix_to_tuples(x));
    return rcpp_result_gen;
END_RCPP
}
// tuples_to_matrix
NumericMatrix tuples_to_matrix(List x);
RcppExport SEXP _kdtools_tuples_to_matrix(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tuples_to_matrix(x));
    return rcpp_result_gen;
END_RCPP
}
// tuples_to_matrix_rows
NumericMatrix tuples_to_matrix_rows(List x, size_t a, size_t b);
RcppExport SEXP _kdtools_tuples_to_matrix_rows(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< size_t >::type a(aSEXP);
    Rcpp::traits::input_parameter< size_t >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(tuples_to_matrix_rows(x, a, b));
    return rcpp_result_gen;
END_RCPP
}
// kd_order_df_no_validation
IntegerVector kd_order_df_no_validation(const List& df, const IntegerVector& idx, bool parallel);
RcppExport SEXP _kdtools_kd_order_df_no_validation(SEXP dfSEXP, SEXP idxSEXP, SEXP parallelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type df(dfSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< bool >::type parallel(parallelSEXP);
    rcpp_result_gen = Rcpp::wrap(kd_order_df_no_validation(df, idx, parallel));
    return rcpp_result_gen;
END_RCPP
}
// kd_order_df
IntegerVector kd_order_df(const List& df, const IntegerVector& idx, bool parallel);
RcppExport SEXP _kdtools_kd_order_df(SEXP dfSEXP, SEXP idxSEXP, SEXP parallelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type df(dfSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< bool >::type parallel(parallelSEXP);
    rcpp_result_gen = Rcpp::wrap(kd_order_df(df, idx, parallel));
    return rcpp_result_gen;
END_RCPP
}
// kd_lex_order_df_no_validation
IntegerVector kd_lex_order_df_no_validation(const List& df, const IntegerVector& idx);
RcppExport SEXP _kdtools_kd_lex_order_df_no_validation(SEXP dfSEXP, SEXP idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type df(dfSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type idx(idxSEXP);
    rcpp_result_gen = Rcpp::wrap(kd_lex_order_df_no_validation(df, idx));
    return rcpp_result_gen;
END_RCPP
}
// kd_lex_order_df
IntegerVector kd_lex_order_df(const List& df, const IntegerVector& idx);
RcppExport SEXP _kdtools_kd_lex_order_df(SEXP dfSEXP, SEXP idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type df(dfSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type idx(idxSEXP);
    rcpp_result_gen = Rcpp::wrap(kd_lex_order_df(df, idx));
    return rcpp_result_gen;
END_RCPP
}
// kd_is_sorted_df_no_validation
bool kd_is_sorted_df_no_validation(const List& df, const IntegerVector& idx, bool parallel);
RcppExport SEXP _kdtools_kd_is_sorted_df_no_validation(SEXP dfSEXP, SEXP idxSEXP, SEXP parallelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type df(dfSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< bool >::type parallel(parallelSEXP);
    rcpp_result_gen = Rcpp::wrap(kd_is_sorted_df_no_validation(df, idx, parallel));
    return rcpp_result_gen;
END_RCPP
}
// kd_is_sorted_df
bool kd_is_sorted_df(const List& df, const IntegerVector& idx, bool parallel);
RcppExport SEXP _kdtools_kd_is_sorted_df(SEXP dfSEXP, SEXP idxSEXP, SEXP parallelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type df(dfSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< bool >::type parallel(parallelSEXP);
    rcpp_result_gen = Rcpp::wrap(kd_is_sorted_df(df, idx, parallel));
    return rcpp_result_gen;
END_RCPP
}
// kd_rq_df_no_validation
std::vector<int> kd_rq_df_no_validation(const List& df, const IntegerVector& idx, const List& lower, const List& upper);
RcppExport SEXP _kdtools_kd_rq_df_no_validation(SEXP dfSEXP, SEXP idxSEXP, SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type df(dfSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< const List& >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< const List& >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(kd_rq_df_no_validation(df, idx, lower, upper));
    return rcpp_result_gen;
END_RCPP
}
// kd_rq_df
std::vector<int> kd_rq_df(const List& df, const IntegerVector& idx, const List& lower, const List& upper);
RcppExport SEXP _kdtools_kd_rq_df(SEXP dfSEXP, SEXP idxSEXP, SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type df(dfSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< const List& >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< const List& >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(kd_rq_df(df, idx, lower, upper));
    return rcpp_result_gen;
END_RCPP
}
// kd_nn_df_no_validation
List kd_nn_df_no_validation(const List& df, const IntegerVector& idx, const NumericVector& w, const List& key, const double a, const double p, const int n);
RcppExport SEXP _kdtools_kd_nn_df_no_validation(SEXP dfSEXP, SEXP idxSEXP, SEXP wSEXP, SEXP keySEXP, SEXP aSEXP, SEXP pSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type df(dfSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const List& >::type key(keySEXP);
    Rcpp::traits::input_parameter< const double >::type a(aSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(kd_nn_df_no_validation(df, idx, w, key, a, p, n));
    return rcpp_result_gen;
END_RCPP
}
// kd_nn_df
List kd_nn_df(const List& df, const IntegerVector& idx, const NumericVector& w, const List& key, const double a, const double p, const int n);
RcppExport SEXP _kdtools_kd_nn_df(SEXP dfSEXP, SEXP idxSEXP, SEXP wSEXP, SEXP keySEXP, SEXP aSEXP, SEXP pSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type df(dfSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const List& >::type key(keySEXP);
    Rcpp::traits::input_parameter< const double >::type a(aSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(kd_nn_df(df, idx, w, key, a, p, n));
    return rcpp_result_gen;
END_RCPP
}
// has_cxx17
bool has_cxx17();
RcppExport SEXP _kdtools_has_cxx17() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(has_cxx17());
    return rcpp_result_gen;
END_RCPP
}
// kd_order_
IntegerVector kd_order_(List x, bool inplace, bool parallel);
RcppExport SEXP _kdtools_kd_order_(SEXP xSEXP, SEXP inplaceSEXP, SEXP parallelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type inplace(inplaceSEXP);
    Rcpp::traits::input_parameter< bool >::type parallel(parallelSEXP);
    rcpp_result_gen = Rcpp::wrap(kd_order_(x, inplace, parallel));
    return rcpp_result_gen;
END_RCPP
}
// kd_is_sorted_
bool kd_is_sorted_(List x, bool parallel);
RcppExport SEXP _kdtools_kd_is_sorted_(SEXP xSEXP, SEXP parallelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type parallel(parallelSEXP);
    rcpp_result_gen = Rcpp::wrap(kd_is_sorted_(x, parallel));
    return rcpp_result_gen;
END_RCPP
}
// kd_sort_
List kd_sort_(List x, bool inplace, bool parallel);
RcppExport SEXP _kdtools_kd_sort_(SEXP xSEXP, SEXP inplaceSEXP, SEXP parallelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type inplace(inplaceSEXP);
    Rcpp::traits::input_parameter< bool >::type parallel(parallelSEXP);
    rcpp_result_gen = Rcpp::wrap(kd_sort_(x, inplace, parallel));
    return rcpp_result_gen;
END_RCPP
}
// lex_sort_
List lex_sort_(List x, bool inplace);
RcppExport SEXP _kdtools_lex_sort_(SEXP xSEXP, SEXP inplaceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type inplace(inplaceSEXP);
    rcpp_result_gen = Rcpp::wrap(lex_sort_(x, inplace));
    return rcpp_result_gen;
END_RCPP
}
// kd_lower_bound_
int kd_lower_bound_(List x, NumericVector value);
RcppExport SEXP _kdtools_kd_lower_bound_(SEXP xSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(kd_lower_bound_(x, value));
    return rcpp_result_gen;
END_RCPP
}
// kd_upper_bound_
int kd_upper_bound_(List x, NumericVector value);
RcppExport SEXP _kdtools_kd_upper_bound_(SEXP xSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(kd_upper_bound_(x, value));
    return rcpp_result_gen;
END_RCPP
}
// kd_range_query_
List kd_range_query_(List x, NumericVector lower, NumericVector upper);
RcppExport SEXP _kdtools_kd_range_query_(SEXP xSEXP, SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(kd_range_query_(x, lower, upper));
    return rcpp_result_gen;
END_RCPP
}
// kd_rq_indices_
IntegerVector kd_rq_indices_(List x, NumericVector lower, NumericVector upper);
RcppExport SEXP _kdtools_kd_rq_indices_(SEXP xSEXP, SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(kd_rq_indices_(x, lower, upper));
    return rcpp_result_gen;
END_RCPP
}
// kd_rq_circular_
List kd_rq_circular_(List x, NumericVector center, double radius);
RcppExport SEXP _kdtools_kd_rq_circular_(SEXP xSEXP, SEXP centerSEXP, SEXP radiusSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type center(centerSEXP);
    Rcpp::traits::input_parameter< double >::type radius(radiusSEXP);
    rcpp_result_gen = Rcpp::wrap(kd_rq_circular_(x, center, radius));
    return rcpp_result_gen;
END_RCPP
}
// kd_rqi_circular_
IntegerVector kd_rqi_circular_(List x, NumericVector center, double radius);
RcppExport SEXP _kdtools_kd_rqi_circular_(SEXP xSEXP, SEXP centerSEXP, SEXP radiusSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type center(centerSEXP);
    Rcpp::traits::input_parameter< double >::type radius(radiusSEXP);
    rcpp_result_gen = Rcpp::wrap(kd_rqi_circular_(x, center, radius));
    return rcpp_result_gen;
END_RCPP
}
// kd_nearest_neighbor_
int kd_nearest_neighbor_(List x, NumericVector value);
RcppExport SEXP _kdtools_kd_nearest_neighbor_(SEXP xSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(kd_nearest_neighbor_(x, value));
    return rcpp_result_gen;
END_RCPP
}
// kd_binary_search_
bool kd_binary_search_(List x, NumericVector value);
RcppExport SEXP _kdtools_kd_binary_search_(SEXP xSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(kd_binary_search_(x, value));
    return rcpp_result_gen;
END_RCPP
}
// kd_nearest_neighbors_
List kd_nearest_neighbors_(List x, NumericVector value, int n, double p, double a);
RcppExport SEXP _kdtools_kd_nearest_neighbors_(SEXP xSEXP, SEXP valueSEXP, SEXP nSEXP, SEXP pSEXP, SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type value(valueSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(kd_nearest_neighbors_(x, value, n, p, a));
    return rcpp_result_gen;
END_RCPP
}
// kd_nn_indices_
IntegerVector kd_nn_indices_(List x, NumericVector value, int n, double p, double a);
RcppExport SEXP _kdtools_kd_nn_indices_(SEXP xSEXP, SEXP valueSEXP, SEXP nSEXP, SEXP pSEXP, SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type value(valueSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(kd_nn_indices_(x, value, n, p, a));
    return rcpp_result_gen;
END_RCPP
}
// kd_nn_dist_
List kd_nn_dist_(List x, NumericVector value, int n, double p, double a);
RcppExport SEXP _kdtools_kd_nn_dist_(SEXP xSEXP, SEXP valueSEXP, SEXP nSEXP, SEXP pSEXP, SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type value(valueSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(kd_nn_dist_(x, value, n, p, a));
    return rcpp_result_gen;
END_RCPP
}
// kd_lex_order_mat_no_validation
IntegerVector kd_lex_order_mat_no_validation(const NumericMatrix& mat, const IntegerVector& idx);
RcppExport SEXP _kdtools_kd_lex_order_mat_no_validation(SEXP matSEXP, SEXP idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type mat(matSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type idx(idxSEXP);
    rcpp_result_gen = Rcpp::wrap(kd_lex_order_mat_no_validation(mat, idx));
    return rcpp_result_gen;
END_RCPP
}
// kd_lex_order_mat
IntegerVector kd_lex_order_mat(const NumericMatrix& mat, const IntegerVector& idx);
RcppExport SEXP _kdtools_kd_lex_order_mat(SEXP matSEXP, SEXP idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type mat(matSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type idx(idxSEXP);
    rcpp_result_gen = Rcpp::wrap(kd_lex_order_mat(mat, idx));
    return rcpp_result_gen;
END_RCPP
}
// kd_order_mat_no_validation
IntegerVector kd_order_mat_no_validation(const NumericMatrix& mat, const IntegerVector& idx, bool parallel);
RcppExport SEXP _kdtools_kd_order_mat_no_validation(SEXP matSEXP, SEXP idxSEXP, SEXP parallelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type mat(matSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< bool >::type parallel(parallelSEXP);
    rcpp_result_gen = Rcpp::wrap(kd_order_mat_no_validation(mat, idx, parallel));
    return rcpp_result_gen;
END_RCPP
}
// kd_order_mat
IntegerVector kd_order_mat(const NumericMatrix& mat, const IntegerVector& idx, bool parallel);
RcppExport SEXP _kdtools_kd_order_mat(SEXP matSEXP, SEXP idxSEXP, SEXP parallelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type mat(matSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< bool >::type parallel(parallelSEXP);
    rcpp_result_gen = Rcpp::wrap(kd_order_mat(mat, idx, parallel));
    return rcpp_result_gen;
END_RCPP
}
// kd_is_sorted_mat_no_validation
bool kd_is_sorted_mat_no_validation(const NumericMatrix& mat, const IntegerVector& idx, bool parallel);
RcppExport SEXP _kdtools_kd_is_sorted_mat_no_validation(SEXP matSEXP, SEXP idxSEXP, SEXP parallelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type mat(matSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< bool >::type parallel(parallelSEXP);
    rcpp_result_gen = Rcpp::wrap(kd_is_sorted_mat_no_validation(mat, idx, parallel));
    return rcpp_result_gen;
END_RCPP
}
// kd_is_sorted_mat
bool kd_is_sorted_mat(const NumericMatrix& mat, const IntegerVector& idx, bool parallel);
RcppExport SEXP _kdtools_kd_is_sorted_mat(SEXP matSEXP, SEXP idxSEXP, SEXP parallelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type mat(matSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< bool >::type parallel(parallelSEXP);
    rcpp_result_gen = Rcpp::wrap(kd_is_sorted_mat(mat, idx, parallel));
    return rcpp_result_gen;
END_RCPP
}
// kd_rq_mat_no_validation
std::vector<int> kd_rq_mat_no_validation(const NumericMatrix& mat, const IntegerVector& idx, const NumericVector& lower, const NumericVector& upper);
RcppExport SEXP _kdtools_kd_rq_mat_no_validation(SEXP matSEXP, SEXP idxSEXP, SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type mat(matSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(kd_rq_mat_no_validation(mat, idx, lower, upper));
    return rcpp_result_gen;
END_RCPP
}
// kd_rq_mat
std::vector<int> kd_rq_mat(const NumericMatrix& mat, const IntegerVector& idx, const NumericVector& lower, const NumericVector& upper);
RcppExport SEXP _kdtools_kd_rq_mat(SEXP matSEXP, SEXP idxSEXP, SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type mat(matSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(kd_rq_mat(mat, idx, lower, upper));
    return rcpp_result_gen;
END_RCPP
}
// kd_nn_mat_no_validation
List kd_nn_mat_no_validation(const NumericMatrix& mat, const IntegerVector& idx, const NumericVector& key, const double alpha, const double p, const int n);
RcppExport SEXP _kdtools_kd_nn_mat_no_validation(SEXP matSEXP, SEXP idxSEXP, SEXP keySEXP, SEXP alphaSEXP, SEXP pSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type mat(matSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type key(keySEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(kd_nn_mat_no_validation(mat, idx, key, alpha, p, n));
    return rcpp_result_gen;
END_RCPP
}
// kd_nn_mat
List kd_nn_mat(const NumericMatrix& mat, const IntegerVector& idx, const NumericVector& key, const double alpha, const double p, const int n);
RcppExport SEXP _kdtools_kd_nn_mat(SEXP matSEXP, SEXP idxSEXP, SEXP keySEXP, SEXP alphaSEXP, SEXP pSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type mat(matSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type key(keySEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(kd_nn_mat(mat, idx, key, alpha, p, n));
    return rcpp_result_gen;
END_RCPP
}
// kd_loo_xval
List kd_loo_xval(const NumericMatrix& mat, const IntegerVector& idx, const IntegerVector& lhs, const double alpha, const double p, const int n);
RcppExport SEXP _kdtools_kd_loo_xval(SEXP matSEXP, SEXP idxSEXP, SEXP lhsSEXP, SEXP alphaSEXP, SEXP pSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type mat(matSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type lhs(lhsSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(kd_loo_xval(mat, idx, lhs, alpha, p, n));
    return rcpp_result_gen;
END_RCPP
}
// levenshtein
int levenshtein(const char* s1, const char* s2);
RcppExport SEXP _kdtools_levenshtein(SEXP s1SEXP, SEXP s2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char* >::type s1(s1SEXP);
    Rcpp::traits::input_parameter< const char* >::type s2(s2SEXP);
    rcpp_result_gen = Rcpp::wrap(levenshtein(s1, s2));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP run_testthat_tests(SEXP);

static const R_CallMethodDef CallEntries[] = {
    {"_kdtools_matrix_to_tuples", (DL_FUNC) &_kdtools_matrix_to_tuples, 1},
    {"_kdtools_tuples_to_matrix", (DL_FUNC) &_kdtools_tuples_to_matrix, 1},
    {"_kdtools_tuples_to_matrix_rows", (DL_FUNC) &_kdtools_tuples_to_matrix_rows, 3},
    {"_kdtools_kd_order_df_no_validation", (DL_FUNC) &_kdtools_kd_order_df_no_validation, 3},
    {"_kdtools_kd_order_df", (DL_FUNC) &_kdtools_kd_order_df, 3},
    {"_kdtools_kd_lex_order_df_no_validation", (DL_FUNC) &_kdtools_kd_lex_order_df_no_validation, 2},
    {"_kdtools_kd_lex_order_df", (DL_FUNC) &_kdtools_kd_lex_order_df, 2},
    {"_kdtools_kd_is_sorted_df_no_validation", (DL_FUNC) &_kdtools_kd_is_sorted_df_no_validation, 3},
    {"_kdtools_kd_is_sorted_df", (DL_FUNC) &_kdtools_kd_is_sorted_df, 3},
    {"_kdtools_kd_rq_df_no_validation", (DL_FUNC) &_kdtools_kd_rq_df_no_validation, 4},
    {"_kdtools_kd_rq_df", (DL_FUNC) &_kdtools_kd_rq_df, 4},
    {"_kdtools_kd_nn_df_no_validation", (DL_FUNC) &_kdtools_kd_nn_df_no_validation, 7},
    {"_kdtools_kd_nn_df", (DL_FUNC) &_kdtools_kd_nn_df, 7},
    {"_kdtools_has_cxx17", (DL_FUNC) &_kdtools_has_cxx17, 0},
    {"_kdtools_kd_order_", (DL_FUNC) &_kdtools_kd_order_, 3},
    {"_kdtools_kd_is_sorted_", (DL_FUNC) &_kdtools_kd_is_sorted_, 2},
    {"_kdtools_kd_sort_", (DL_FUNC) &_kdtools_kd_sort_, 3},
    {"_kdtools_lex_sort_", (DL_FUNC) &_kdtools_lex_sort_, 2},
    {"_kdtools_kd_lower_bound_", (DL_FUNC) &_kdtools_kd_lower_bound_, 2},
    {"_kdtools_kd_upper_bound_", (DL_FUNC) &_kdtools_kd_upper_bound_, 2},
    {"_kdtools_kd_range_query_", (DL_FUNC) &_kdtools_kd_range_query_, 3},
    {"_kdtools_kd_rq_indices_", (DL_FUNC) &_kdtools_kd_rq_indices_, 3},
    {"_kdtools_kd_rq_circular_", (DL_FUNC) &_kdtools_kd_rq_circular_, 3},
    {"_kdtools_kd_rqi_circular_", (DL_FUNC) &_kdtools_kd_rqi_circular_, 3},
    {"_kdtools_kd_nearest_neighbor_", (DL_FUNC) &_kdtools_kd_nearest_neighbor_, 2},
    {"_kdtools_kd_binary_search_", (DL_FUNC) &_kdtools_kd_binary_search_, 2},
    {"_kdtools_kd_nearest_neighbors_", (DL_FUNC) &_kdtools_kd_nearest_neighbors_, 5},
    {"_kdtools_kd_nn_indices_", (DL_FUNC) &_kdtools_kd_nn_indices_, 5},
    {"_kdtools_kd_nn_dist_", (DL_FUNC) &_kdtools_kd_nn_dist_, 5},
    {"_kdtools_kd_lex_order_mat_no_validation", (DL_FUNC) &_kdtools_kd_lex_order_mat_no_validation, 2},
    {"_kdtools_kd_lex_order_mat", (DL_FUNC) &_kdtools_kd_lex_order_mat, 2},
    {"_kdtools_kd_order_mat_no_validation", (DL_FUNC) &_kdtools_kd_order_mat_no_validation, 3},
    {"_kdtools_kd_order_mat", (DL_FUNC) &_kdtools_kd_order_mat, 3},
    {"_kdtools_kd_is_sorted_mat_no_validation", (DL_FUNC) &_kdtools_kd_is_sorted_mat_no_validation, 3},
    {"_kdtools_kd_is_sorted_mat", (DL_FUNC) &_kdtools_kd_is_sorted_mat, 3},
    {"_kdtools_kd_rq_mat_no_validation", (DL_FUNC) &_kdtools_kd_rq_mat_no_validation, 4},
    {"_kdtools_kd_rq_mat", (DL_FUNC) &_kdtools_kd_rq_mat, 4},
    {"_kdtools_kd_nn_mat_no_validation", (DL_FUNC) &_kdtools_kd_nn_mat_no_validation, 6},
    {"_kdtools_kd_nn_mat", (DL_FUNC) &_kdtools_kd_nn_mat, 6},
    {"_kdtools_kd_loo_xval", (DL_FUNC) &_kdtools_kd_loo_xval, 6},
    {"_kdtools_levenshtein", (DL_FUNC) &_kdtools_levenshtein, 2},
    {"run_testthat_tests", (DL_FUNC) &run_testthat_tests, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_kdtools(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
