// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/kdtools.h"
#include <Rcpp.h>

using namespace Rcpp;

// matrix_to_tuples
List matrix_to_tuples(const NumericMatrix& x);
RcppExport SEXP _kdtools_matrix_to_tuples(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(matrix_to_tuples(x));
    return rcpp_result_gen;
END_RCPP
}
// tuples_to_matrix
NumericMatrix tuples_to_matrix(List x);
RcppExport SEXP _kdtools_tuples_to_matrix(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tuples_to_matrix(x));
    return rcpp_result_gen;
END_RCPP
}
// tuples_to_matrix_rows
NumericMatrix tuples_to_matrix_rows(List x, int a, int b);
RcppExport SEXP _kdtools_tuples_to_matrix_rows(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(tuples_to_matrix_rows(x, a, b));
    return rcpp_result_gen;
END_RCPP
}
// kd_sort_
List kd_sort_(List x, bool inplace, bool parallel);
RcppExport SEXP _kdtools_kd_sort_(SEXP xSEXP, SEXP inplaceSEXP, SEXP parallelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type inplace(inplaceSEXP);
    Rcpp::traits::input_parameter< bool >::type parallel(parallelSEXP);
    rcpp_result_gen = Rcpp::wrap(kd_sort_(x, inplace, parallel));
    return rcpp_result_gen;
END_RCPP
}
// kd_is_sorted_
bool kd_is_sorted_(List x);
RcppExport SEXP _kdtools_kd_is_sorted_(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(kd_is_sorted_(x));
    return rcpp_result_gen;
END_RCPP
}
// lex_sort_
List lex_sort_(List x, bool inplace);
RcppExport SEXP _kdtools_lex_sort_(SEXP xSEXP, SEXP inplaceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type inplace(inplaceSEXP);
    rcpp_result_gen = Rcpp::wrap(lex_sort_(x, inplace));
    return rcpp_result_gen;
END_RCPP
}
// kd_lower_bound_
int kd_lower_bound_(List x, NumericVector value);
RcppExport SEXP _kdtools_kd_lower_bound_(SEXP xSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(kd_lower_bound_(x, value));
    return rcpp_result_gen;
END_RCPP
}
// kd_upper_bound_
int kd_upper_bound_(List x, NumericVector value);
RcppExport SEXP _kdtools_kd_upper_bound_(SEXP xSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(kd_upper_bound_(x, value));
    return rcpp_result_gen;
END_RCPP
}
// kd_range_query_
List kd_range_query_(List x, NumericVector lower, NumericVector upper);
RcppExport SEXP _kdtools_kd_range_query_(SEXP xSEXP, SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(kd_range_query_(x, lower, upper));
    return rcpp_result_gen;
END_RCPP
}
// kd_rq_indices_
IntegerVector kd_rq_indices_(List x, NumericVector lower, NumericVector upper);
RcppExport SEXP _kdtools_kd_rq_indices_(SEXP xSEXP, SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(kd_rq_indices_(x, lower, upper));
    return rcpp_result_gen;
END_RCPP
}
// kd_nearest_neighbor_
int kd_nearest_neighbor_(List x, NumericVector value);
RcppExport SEXP _kdtools_kd_nearest_neighbor_(SEXP xSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(kd_nearest_neighbor_(x, value));
    return rcpp_result_gen;
END_RCPP
}
// kd_binary_search_
bool kd_binary_search_(List x, NumericVector value);
RcppExport SEXP _kdtools_kd_binary_search_(SEXP xSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(kd_binary_search_(x, value));
    return rcpp_result_gen;
END_RCPP
}
// kd_nearest_neighbors_
List kd_nearest_neighbors_(List x, NumericVector value, int n);
RcppExport SEXP _kdtools_kd_nearest_neighbors_(SEXP xSEXP, SEXP valueSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type value(valueSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(kd_nearest_neighbors_(x, value, n));
    return rcpp_result_gen;
END_RCPP
}
// kd_nn_indices_
IntegerVector kd_nn_indices_(List x, NumericVector value, int n);
RcppExport SEXP _kdtools_kd_nn_indices_(SEXP xSEXP, SEXP valueSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type value(valueSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(kd_nn_indices_(x, value, n));
    return rcpp_result_gen;
END_RCPP
}
// kd_order_
IntegerVector kd_order_(List x, bool parallel);
RcppExport SEXP _kdtools_kd_order_(SEXP xSEXP, SEXP parallelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type parallel(parallelSEXP);
    rcpp_result_gen = Rcpp::wrap(kd_order_(x, parallel));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_kdtools_matrix_to_tuples", (DL_FUNC) &_kdtools_matrix_to_tuples, 1},
    {"_kdtools_tuples_to_matrix", (DL_FUNC) &_kdtools_tuples_to_matrix, 1},
    {"_kdtools_tuples_to_matrix_rows", (DL_FUNC) &_kdtools_tuples_to_matrix_rows, 3},
    {"_kdtools_kd_sort_", (DL_FUNC) &_kdtools_kd_sort_, 3},
    {"_kdtools_kd_is_sorted_", (DL_FUNC) &_kdtools_kd_is_sorted_, 1},
    {"_kdtools_lex_sort_", (DL_FUNC) &_kdtools_lex_sort_, 2},
    {"_kdtools_kd_lower_bound_", (DL_FUNC) &_kdtools_kd_lower_bound_, 2},
    {"_kdtools_kd_upper_bound_", (DL_FUNC) &_kdtools_kd_upper_bound_, 2},
    {"_kdtools_kd_range_query_", (DL_FUNC) &_kdtools_kd_range_query_, 3},
    {"_kdtools_kd_rq_indices_", (DL_FUNC) &_kdtools_kd_rq_indices_, 3},
    {"_kdtools_kd_nearest_neighbor_", (DL_FUNC) &_kdtools_kd_nearest_neighbor_, 2},
    {"_kdtools_kd_binary_search_", (DL_FUNC) &_kdtools_kd_binary_search_, 2},
    {"_kdtools_kd_nearest_neighbors_", (DL_FUNC) &_kdtools_kd_nearest_neighbors_, 3},
    {"_kdtools_kd_nn_indices_", (DL_FUNC) &_kdtools_kd_nn_indices_, 3},
    {"_kdtools_kd_order_", (DL_FUNC) &_kdtools_kd_order_, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_kdtools(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
